# MIT License
#
# Copyright (c) 2021 Martin Kloesch
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: CMake Build

on:
  push:
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      working-directory: ./build
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: GCC (Ubuntu)
          os: ubuntu-latest
          coverage: true
          documentation: true
          memcheck: true
          cc: gcc
          cxx: g++
          generator: Unix Makefiles

        - name: Clang (Ubuntu)
          os: ubuntu-latest
          coverage: false
          documentation: true
          memcheck: true
          cc: clang
          cxx: clang++
          generator: Unix Makefiles

        - name: MSVC (Windows)
          os: windows-latest
          coverage: false
          documentation: false
          memcheck: false
          cc: cl
          cxx: cl
          generator: Visual Studio 16 2019

        - name: Clang (MacOS)
          os: macos-latest
          coverage: false
          documentation: false
          memcheck: false
          cc: clang
          cxx: clang++
          generator: Ninja

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install dependencies (GCC (Ubuntu))
        if: ${{ matrix.config.name == 'GCC (Ubuntu)' }}
        run: |
          sudo apt-get update
          sudo apt-get install doxygen graphviz lcov valgrind
      - name: install dependencies (Clang (Ubuntu))
        if: ${{ matrix.config.name == 'Clang (Ubuntu)' }}
        run: |
          sudo apt-get update
          sudo apt-get install doxygen graphviz valgrind
      - name: install dependencies (MSVC (Windows))
        if: ${{ matrix.config.name == 'MSVC (Windows)' }}
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
      - name: install dependencies (Clang (MacOS))
        if: ${{ matrix.config.name == 'Clang (MacOS)' }}
        run: |
          brew install ninja

      - name: configure
        run: |
          mkdir ${{ env.working-directory }}
          cd ${{ env.working-directory }}
          cmake -G "${{ matrix.config.generator }}" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -D BUILD_DOCUMENTATION=${{ matrix.config.documentation }} -DBUILD_TESTING=ON -DCODE_COVERAGE=${{ matrix.config.coverage }} ..

      - name: build
        working-directory: ${{ env.working-directory }}
        run: cmake --build . --config Release

      - name: test
        working-directory: ${{ env.working-directory }}
        run: ctest -C Release --no-compress-output -T test .

      - name: test (memcheck)
        if: ${{ matrix.config.memcheck }}
        working-directory: ${{ env.working-directory }}
        run:  ctest -C Release --no-compress-output -T memcheck .

      - name: coverage
        if: ${{ matrix.config.coverage }}
        working-directory: ${{ env.working-directory }}
        run: |
          lcov --capture --directory . --output-file code.coverage
          lcov --remove code.coverage '/usr/*' --output-file code.coverage
          lcov --remove code.coverage '**/tests/*' --output-file code.coverage
          lcov --remove code.coverage '**/catch.hpp' --output-file code.coverage
          lcov --list code.coverage
          bash <(curl -s https://codecov.io/bash) -f code.coverage
